{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../Map.svelte"
  ],
  "sourcesContent": [
    "<script>\n\timport { onMount } from 'svelte';\n\timport Map from './Map.svelte';\n\timport { csv, json } from 'd3-fetch';\n\timport { format } from 'd3-format';\n\timport Table from './Table.svelte';\n\n\tlet active = 'Confirmed';\n\tlet data = null;\n\tlet world = null;\n\tlet isInitial = false;\n\n\tconst sum = {};\n\n\tconst handleClick = (type) => () => {\n\t\tactive = type;\n\t};\n\n\tconst sumByType = (data, type) => {\n\t\treturn data.reduce((acc, row) => {\n\t\t\treturn parseInt(row[type]) + acc;\n\t\t}, 0);\n\t};\n\n\tconst formatNumber = format('.3s');\n\n\tonMount(async function () {\n\t\t[world, data] = await Promise.all([\n\t\t\tjson('https://cdn.jsdelivr.net/npm/world-atlas@2/countries-110m.json'),\n\t\t\tcsv('https://docs.google.com/spreadsheets/d/e/2PACX-1vRjixGgr6I18VAxY6Ybv26aOeBdfD-NqHU01nnjBR-rpPPs0Jhtgvmaclyo98kG4XXWKiIUyY5vbA3Q/pub?gid=3549213&single=true&output=csv')\n\t\t]);\n\n\t\tsum.Confirmed = formatNumber(sumByType(data, 'Confirmed'));\n\t\tsum.Treatment = formatNumber(sumByType(data, 'Treatment'));\n\t\tsum.Recovered = formatNumber(sumByType(data, 'Recovered'));\n\t\tsum.Deaths = formatNumber(sumByType(data, 'Deaths'));\n\n\t\tisInitial = true;\n\t});\n</script>\n\n<main>\n\t{#if isInitial}\n\t\t<div class=\"cut\">\n\t\t\t<Map active={active} data={data} world={world} />\n\t\t\t<div class=\"label-box\">\n\t\t\t\t<label class:active={active === 'Confirmed'} on:click={handleClick('Confirmed')}><span style=\"background: #B00020\"></span>總確診({sum.Confirmed})</label>\n\t\t\t\t<span>=</span>\n\t\t\t\t<label class:active={active === 'Treatment'} on:click={handleClick('Treatment')}><span style=\"background: #dc8c50\"></span>治療中({sum.Treatment})</label>\n\t\t\t\t<span>+</span>\n\t\t\t\t<label class:active={active === 'Recovered'} on:click={handleClick('Recovered')}><span style=\"background: #90EE02\"></span>復原({sum.Recovered})</label>\n\t\t\t\t<span>+</span>\n\t\t\t\t<label class:active={active === 'Deaths'} on:click={handleClick('Deaths')}><span style=\"background: #000\"></span>死亡({sum.Deaths})</label>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"cut\">\n\t\t\t<Table />\n\t\t</div>\n\t{/if}\n</main>\n\n<style>\n\tmain {\n\t\ttext-align: center;\n\t\tmargin: 0 auto;\n\t\toverflow: hidden;\n\t}\n\n\t.cut {\n\t\tdisplay: flex;\n\t\tjustify-content: center;\n\t\talign-items: center;\n\t\tflex-direction: column;\n\t\theight: 100vh;\n\t}\n\n\th1 {\n\t\tcolor: #ff3e00;\n\t\ttext-transform: uppercase;\n\t\tfont-size: 4em;\n\t\tfont-weight: 100;\n\t}\n\n\t.label-box {\n\t\tdisplay: flex;\n\t\tcolor: #fff;\n\t\tmargin-top: 20px;\n\t\talign-items: center;\n\t\tletter-spacing: 2px;\n\t\tflex-wrap: wrap;\n\t\tjustify-content: center;\n\t\tmax-width: 80vw;\n\t}\n\n\t.label-box label {\n\t\tborder-radius: 16px;\n\t\theight: 32px;\n\t\tline-height: 32px;\n\t\tpadding: 0 12px;\n\t\tmargin: 6px 8px;\n\t\tbackground: #505050;\n\t\topacity: 0.3;\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tfont-weight: bold;\n\t}\n\t.label-box label span{\n\t\twidth: 18px;\n\t\theight: 18px;\n\t\tborder-radius: 50%;\n\t\tdisplay: inline-block;\n\t\tmargin-right: 6px;\n\t}\n\n\t.label-box label.active {\n\t\topacity: 1;\n\t}\n</style>\n",
    "<script>\n  import { onMount } from \"svelte\"\n  import { feature } from \"topojson\"\n\n  import { drag } from 'd3-drag'\n  import { scaleRadial } from \"d3-scale\"\n  import { geoOrthographic, geoPath, geoProjection, geoOrthographicRaw, geoGraticule, geoCircle } from \"d3-geo\";\n  import { geoInertiaDrag, geoInertiaDragHelper } from 'd3-inertia'\n  import { select, mouse } from 'd3-selection'\n  import { timer } from 'd3-timer'\n\n  const dpi = window.devicePixelRatio || 1;\n  let velocity = 0.02;\n\n  const handleMouseEnter = () => {\n    velocity = 0.005;\n  };\n  const handleMouseLeave = () => {\n    velocity = 0.02;\n  };\n\n  const getSize = () => {\n    const width = document.body.clientWidth;\n    const height = document.body.clientHeight;\n    return Math.min(width, 0.8 * height)\n  };\n\n  let backData = '';\n  let isDragging = false;\n  let canvas;\n  let size = getSize();\n\n  const colorMap = {\n    Confirmed: \"#B00020\",\n    Treatment: \"#dc8c50\",\n    Recovered: \"#90EE02\",\n    Deaths: \"#000\",\n  };\n\n  export let data;\n  export let active;\n  export let world;\n\n  window.addEventListener('resize', () => {\n    size = getSize()\n  });\n\n  onMount(async function() {\n    // fix dpi blur problem\n    size = getSize() * dpi;\n\n    // console.log(data.colum);\n    const land = feature(world, world.objects.countries);\n\n    const projection = geoOrthographic().rotate([-120, -20, 0]).precision(0.1)\n            .fitExtent([[5, 5], [size - 5, size - 5]], {type: \"Sphere\"});\n\n    const backProjection = geoProjection((a,b) => geoOrthographicRaw(-a,b))\n            .clipAngle(90)\n            .translate(projection.translate())\n            .scale(projection.scale());\n\n    const context = canvas.getContext('2d');\n\n    const min = 1;\n    const max = 100000;\n\n    const radiusScale = scaleRadial().domain([0, 1, max]).range([0, 0.5, 13]);\n\n    const svg = select('svg');\n\n\n    const render = function() {\n      // fix dpi blur problem\n      size = getSize() * dpi;\n\n      const path = geoPath(projection, context);\n      const rotate = projection.rotate();\n      const backPath = geoPath(backProjection.rotate([rotate[0]+180, -rotate[1], -rotate[2]]), context);\n      context.clearRect(0, 0, size, size);\n\n      context.beginPath(), path({type:\"Sphere\"}),\n              context.fillStyle = '#505050', context.fill(); // fcfcfc\n\n      context.beginPath(), backPath(land),\n              context.fillStyle = '#6002EE', context.fill(); // d0ddfa\n\n      context.font = \"bold 90pt Oxanium\", context.fillStyle = \"#000\",\n              context.textAlign = \"center\", context.textBaseline = \"middle\", context.fillText('COVID-19', size/2, size/2);\n\n      context.beginPath(), backPath(geoGraticule()()),\n              context.lineWidth = .1, context.strokeStyle = '#97b3f6', context.stroke(); // 97b3f6\n\n      context.beginPath(), path(geoGraticule()()),\n              context.lineWidth = .1, context.strokeStyle = '#BB86FC', context.stroke(); // 1046c6\n\n      context.beginPath(), path(land),\n              context.globalAlpha = 0.9,\n              context.fillStyle = '#D4BFF9', context.fill(), // 5c88ee\n              context.lineWidth = 1, context.strokeStyle = '#7335D8', context.stroke(), // 1046c6\n              context.globalAlpha = 1;\n\n      data.forEach(data => {\n        const number = parseInt(data[active])\n        if (number) {\n          const circle = geoCircle().center([data.Longitude, data.Latitude]).radius(radiusScale(number));\n          context.beginPath(), path(circle()), context.globalAlpha = 0.7,\n                  context.fillStyle = colorMap[active], context.fill(), context.globalAlpha = 1;\n        }\n      });\n\n\n      context.beginPath(), path({type: \"Sphere\"}),\n              context.lineWidth = .1, context.strokeStyle = '#3700B3', context.stroke(); // 1046c6\n    };\n\n\n\n    // no need to specify render() here, it's taken care of by the loop below.\n    // context.canvas.inertia = geoInertiaDrag(select(context.canvas), null, projection);\n\n    const inertia = geoInertiaDragHelper({\n      projection,\n      render: (rotation) => {\n        projection.rotate([rotation[0], -20, 0]);\n      },\n      start: () => {\n        isDragging = true\n      },\n      end: () => {\n        isDragging = false\n      }\n    });\n\n    svg.call(\n      drag().on(\"start\", inertia.start).on(\"drag\", inertia.move).on(\"end\", inertia.end)\n    );\n\n    context.canvas.inertia = inertia;\n\n\n    timer(function() {\n      const rotate = projection.rotate();\n      rotate[0] += velocity * 20;\n      projection.rotate(rotate);\n      render()\n    });\n  });\n</script>\n\n<div class=\"map\" class:drag={isDragging}>\n  <canvas width={size} height={size} bind:this={canvas}></canvas>\n  <svg width={size/dpi} height={size/dpi}>\n    <circle id=\"placeholder\" cx={size/2/dpi} cy={size/2/dpi} r={size/2/dpi} on:mouseenter={handleMouseEnter} on:mouseleave={handleMouseLeave}/>\n  </svg>\n</div>\n\n<style>\n.map {\n  cursor: grab;\n  position: relative;\n  width: 100%;\n  height: 80vh;\n}\n\n\n@media (max-width: 500px) {\n  .map {\n    height: 60vh;\n  }\n}\n\n.map.drag {\n  cursor: grabbing;\n}\n\ncanvas, svg {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  max-width: 100%;\n  max-height: 80vh;\n}\n\n#placeholder {\n  opacity: 0;\n}\n</style>\n"
  ],
  "names": [],
  "mappings": "AA8DC,IAAI,8BAAC,CAAC,AACL,UAAU,CAAE,MAAM,CAClB,MAAM,CAAE,CAAC,CAAC,IAAI,CACd,QAAQ,CAAE,MAAM,AACjB,CAAC,AAED,IAAI,8BAAC,CAAC,AACL,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,MAAM,CACvB,WAAW,CAAE,MAAM,CACnB,cAAc,CAAE,MAAM,CACtB,MAAM,CAAE,KAAK,AACd,CAAC,AASD,UAAU,8BAAC,CAAC,AACX,OAAO,CAAE,IAAI,CACb,KAAK,CAAE,IAAI,CACX,UAAU,CAAE,IAAI,CAChB,WAAW,CAAE,MAAM,CACnB,cAAc,CAAE,GAAG,CACnB,SAAS,CAAE,IAAI,CACf,eAAe,CAAE,MAAM,CACvB,SAAS,CAAE,IAAI,AAChB,CAAC,AAED,yBAAU,CAAC,KAAK,eAAC,CAAC,AACjB,aAAa,CAAE,IAAI,CACnB,MAAM,CAAE,IAAI,CACZ,WAAW,CAAE,IAAI,CACjB,OAAO,CAAE,CAAC,CAAC,IAAI,CACf,MAAM,CAAE,GAAG,CAAC,GAAG,CACf,UAAU,CAAE,OAAO,CACnB,OAAO,CAAE,GAAG,CACZ,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,MAAM,CACnB,WAAW,CAAE,IAAI,AAClB,CAAC,AACD,yBAAU,CAAC,KAAK,CAAC,mBAAI,CAAC,AACrB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,aAAa,CAAE,GAAG,CAClB,OAAO,CAAE,YAAY,CACrB,YAAY,CAAE,GAAG,AAClB,CAAC,AAED,yBAAU,CAAC,KAAK,OAAO,eAAC,CAAC,AACxB,OAAO,CAAE,CAAC,AACX,CAAC;AC0CF,IAAI,cAAC,CAAC,AACJ,MAAM,CAAE,IAAI,CACZ,QAAQ,CAAE,QAAQ,CAClB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,AACd,CAAC,AAGD,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AACzB,IAAI,cAAC,CAAC,AACJ,MAAM,CAAE,IAAI,AACd,CAAC,AACH,CAAC,AAED,IAAI,KAAK,cAAC,CAAC,AACT,MAAM,CAAE,QAAQ,AAClB,CAAC,AAED,oBAAM,CAAE,GAAG,cAAC,CAAC,AACX,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,GAAG,CACR,IAAI,CAAE,GAAG,CACT,SAAS,CAAE,UAAU,IAAI,CAAC,CAAC,IAAI,CAAC,CAChC,SAAS,CAAE,IAAI,CACf,UAAU,CAAE,IAAI,AAClB,CAAC,AAED,YAAY,cAAC,CAAC,AACZ,OAAO,CAAE,CAAC,AACZ,CAAC"
}